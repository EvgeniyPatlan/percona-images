---
- hosts: all
  become: yes
  gather_facts: yes
  roles:
    - cloud-node
    - mysql-init

  tasks:
    - name: cloud-init                 | Change cloud user
      replace:
        dest: /etc/cloud/cloud.cfg
        regexp: 'name: centos'
        replace: 'name: admin'

    - name: MySQL password             | Generate
      when: not root_mycnf_file.stat.exists
      command: /var/lib/cloud/scripts/per-once/init-mysql-password

    - name: MySQL password             | Remove script
      file:
        path: /var/lib/cloud/scripts/per-once/init-mysql-password
        state: absent

    - name: PMM                        | Add PMM Server YUM repository
      when: ansible_os_family == 'RedHat'
      yum_repository:
        name: pmm
        description: PMM Server YUM repository - x86_64
        baseurl: https://repo.percona.com/pmm/7/RPMS/x86_64/
        gpgcheck: yes
        enabled: no
        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-Percona

    - name: PMM                        | Install RPMs
      when: ansible_os_family == 'RedHat'
      yum: name={{ item }} state=installed enablerepo=pmm
      with_items:
        - nginx
        - percona-consul
        - percona-grafana
        - percona-prometheus
        - percona-orchestrator
        - percona-node_exporter
        - percona-qan-api
        - percona-qan-app
        - percona-toolkit
        - percona-dashboards
        - pmm-server
        - pmm-manage

    - name: Disable SELinux
      selinux:
        policy: targeted
        state: permissive

    - name: Orchestrator               | Create MySQL database
      mysql_db:
        name: orchestrator
        state: present

    - name: Orchestrator               | Create MySQL user
      mysql_user:
        name: orchestrator
        host: localhost
        password: '*0AD183209365CECFB9275669074B645DFEF2D180'
        priv: 'orchestrator.*:ALL'
        encrypted: yes
        state: present

    - name: qan-api                    | Create MySQL database
      mysql_db:
        name: pmm
        state: present
      register: pmm_db

    - name: qan-api                    | Import MySQL database
      when: pmm_db.changed
      mysql_db:
        name: pmm
        state: import
        target: /usr/share/percona-qan-api/schema/pmm.sql

    - name: qan-api                    | Create MySQL user
      mysql_user:
        name: percona
        host: localhost
        password: '*25919B3ABBC2A54904C826DF14F11612455A5FAA'
        priv: 'pmm.*:ALL'
        encrypted: yes
        state: present

    - name: PMM                        | Fix nginx config
      replace:
        dest: /etc/nginx/nginx.conf
        regexp: '^(\s*)listen'
        replace: '\1#listen'

    - name: NGINX SSL Certificate      | Add script
      copy:
        content: |
          #!/bin/sh

          set -o errexit

          mkdir -p /srv/nginx

          if [ ! -e /srv/nginx/dhparam.pem ]; then
              openssl dhparam -out /srv/nginx/dhparam.pem 2048
          fi

          if [ ! -e /srv/nginx/ca-certs.pem ]; then
              # Fetch letsencrypt chain
              curl https://letsencrypt.org/certs/isrgrootx1.pem                          > /srv/nginx/ca-certs.pem
              curl https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem       >> /srv/nginx/ca-certs.pem
              curl https://letsencrypt.org/certs/letsencryptauthorityx1.pem             >> /srv/nginx/ca-certs.pem
              curl https://www.identrust.com/certificates/trustid/root-download-x3.html >> /srv/nginx/ca-certs.pem
          fi

          if [ ! -e /srv/nginx/certificate.conf ]; then
              echo "
          [ req ]
          distinguished_name = req_distinguished_name
          prompt             = no

          [ req_distinguished_name ]
          O                  = Main Org.
          " > /srv/nginx/certificate.conf
          fi

          if [ ! -e /srv/nginx/certificate.key -o ! -e /srv/nginx/certificate.crt ]; then
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                  -keyout /srv/nginx/certificate.key \
                  -out    /srv/nginx/certificate.crt \
                  -config /srv/nginx/certificate.conf
          fi
        dest: /var/lib/cloud/scripts/per-boot/generate-ssl-certificate
        mode: 0755

    - name: NGINX SSL Certificate      | Check certificate file
      stat: path=/srv/nginx/certificate.crt
      register: certificate_file

    - name: NGINX SSL Certificate      | Generate certificate
      when: not certificate_file.stat.exists
      command: /var/lib/cloud/scripts/per-boot/generate-ssl-certificate

    - name: NGINX                      | Restart on failure
      ini_file:
        dest: /usr/lib/systemd/system/nginx.service
        section: Service
        option: Restart
        value: on-failure

    - name: NGINX                      | Restart on failure
      ini_file:
        dest: /usr/lib/systemd/system/nginx.service
        section: Service
        option: RestartSec
        value: 10s

    - name: Grafana                    | Check data dir
      stat: path=/srv/grafana/grafana.db
      register: grafana_db

    - name: Grafana                    | Enable Anonymous access
      when: not grafana_db.stat.exists
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: auth.anonymous
        option: enabled
        value: true

    - name: PMM                        | Start services
      service: name={{ item }} state=started enabled=yes
      with_items:
        - grafana-server
        - consul
        - node_exporter
        - prometheus
        - orchestrator
        - percona-qan-api
        - pmm-manage
        - nginx

    - name: PMM                        | Check dashboards version
      stat: path=/srv/grafana/PERCONA_DASHBOARDS_VERSION
      register: dashboards_file

    - name: PMM                        | Wait for Grafana start
      wait_for:
        port: 3000
        state: present
        delay: 30
        timeout: 60

    - name: PMM                        | Import dashboards
      when: not dashboards_file.stat.exists
      command: /usr/share/percona-dashboards/import-dashboards.py /srv/grafana

    - name: PMM                        | Add firewalld rule
      when: ansible_os_family == 'RedHat'
      firewalld: port={{ item }} permanent=true state=enabled immediate=yes
      with_items:
          - 80/tcp
          - 443/tcp

    - name: PMM                        | Add script which show PMM URL
      copy:
        content: |
          #!/bin/sh

          set -o errexit

          PATH=/bin:/sbin

          SOURCE=$(
              cat /var/lib/cloud/data/status.json 2>/dev/null \
                  | python -c 'import json, sys; print json.load(sys.stdin)["v1"]["datasource"];' 2>/dev/null
          )

          IP=$(ip route get 1 | awk '{print $NF;exit}')
          if [ "x$SOURCE" = "xDataSourceEc2" ]; then
              IP=$(curl --connect-timeout 5 -s http://169.254.169.254/latest/meta-data/public-ipv4)
          fi

          echo "

          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                Percona Monitoring and Management           https://${IP}/

          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          " | tee -a /dev/tty0
        dest: /var/lib/cloud/scripts/per-boot/show-pmm-url
        mode: 0755

